openapi: 3.0.0
info:
  title: Simple Chat APIs
  version: 0.212.078
  description: API for the Simple Chat, handling chats, conversations, documents, user settings, groups, feedback, prompts, models, safety, and admin functions.

servers:
  - url: /api
    description: API Root

tags:
  - name: Chat
    description: Chat interaction endpoints
  - name: Conversations
    description: Managing conversations and messages
  - name: Documents
    description: User document management and uploads
  - name: Feedback
    description: User feedback submission and review
  - name: Group Documents
    description: Group-level document management
  - name: Group Prompts
    description: Group-level prompt management
  - name: Groups
    description: Group management and membership
  - name: Models
    description: Fetching available AI models
  - name: Prompts
    description: User prompt management
  - name: Safety
    description: Content safety violation logging and review
  - name: Settings
    description: Application and user settings management
  - name: Users
    description: User-related operations like search and settings
  - name: Admin
    description: Administrative functions (settings tests, index management)

paths:
  # --- Chat Routes (route_backend_chats.py) ---
  /chat:
    post:
      tags:
        - Chat
      summary: Send a message to the chat API
      description: Processes a user message, potentially performs searches (hybrid, Bing), generates images, interacts with the AI model, and returns a response. Handles conversation history, summarization, and content safety. Requires user authentication. Specific features depend on admin settings (e.g., `enable_content_safety`, `enable_web_search`, `enable_image_generation`).
      security:
        - bearerAuth: [] # Assumes authentication is required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Successful chat response, image generation response, or content safety block response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ChatResponse'
                  - $ref: '#/components/schemas/ChatBlockedResponse'
                  - $ref: '#/components/schemas/ImageResponse'
        '400':
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (User not authenticated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (e.g., AI model issue, DB error, Content Safety error, augmentation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Conversation Routes (route_backend_conversations.py) ---
  /get_messages:
    get:
      tags:
        - Conversations
      summary: Get messages for a specific conversation
      description: Retrieves all messages associated with a given conversation ID, ordered by timestamp. Requires user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to fetch messages for.
      responses:
        '200':
          description: Successfully retrieved messages. Returns empty list if conversation exists but has no messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request (Missing conversation_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
           description: Internal Server Error (Database query failed)
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'

  /get_conversations:
    get:
      tags:
        - Conversations
      summary: Get all conversations for the current user
      description: Retrieves a list of conversations belonging to the authenticated user, ordered by last update time (descending). Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved conversations. Returns empty list if user has no conversations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConversationSummary'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
           description: Internal Server Error (Database query failed)
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'

  /create_conversation:
    post:
      tags:
        - Conversations
      summary: Create a new conversation
      description: Creates a new, empty conversation for the authenticated user. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200': # Code returns 200
          description: Successfully created conversation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    type: string
                    format: uuid
                  title:
                    type: string
                    example: "New Conversation"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
           description: Internal Server Error (Database upsert failed)
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'

  /conversations/{conversation_id}:
    put:
      tags:
        - Conversations
      summary: Update conversation title
      description: Updates the title of a specific conversation owned by the authenticated user. Requires user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: The new title for the conversation.
      responses:
        '200':
          description: Conversation title updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conversation updated"
                  title:
                    type: string
                  classification:
                    type: array
                    items:
                      type: string
                    description: Current classifications associated with the conversation.
        '400':
          description: Bad Request (Missing or empty title)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (User does not own the conversation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to read or update conversation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Conversations
      summary: Delete a conversation
      description: Deletes a specific conversation and its associated messages, owned by the authenticated user. Optionally archives them first if `enable_conversation_archiving` setting is true. Requires user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to delete.
      responses:
        '200':
          description: Conversation deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Attempting to delete conversation not owned by user - checked implicitly by read_item check in implementation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to read, archive, or delete conversation/messages)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Document Routes (route_backend_documents.py) ---
  /get_file_content:
    post:
      tags:
        - Documents
      summary: Get content of a file previously uploaded within a conversation
      description: Retrieves the extracted content of a file message stored within a specific conversation. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - conversation_id
                - file_id
              properties:
                conversation_id:
                  type: string
                  format: uuid
                  description: The ID of the conversation containing the file.
                file_id:
                  type: string
                  description: The ID of the file message (e.g., 'convid_file_timestamp_rand').
      responses:
        '200':
          description: File content retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_content:
                    type: string
                    description: The combined text content of the file.
                  filename:
                    type: string
                    description: The original name of the file.
                  is_table:
                    type: boolean
                    description: Indicates if the content represents tabular data.
        '400':
          description: Bad Request (Missing conversation_id or file_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation or File not found in the specified conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/upload:
    post:
      tags:
        - Documents
      summary: Upload document(s) to the user's workspace
      description: Accepts one or more file uploads, saves them temporarily, creates metadata records in the database with 'Queued' status, and queues background tasks for processing and chunking. Returns immediately with document IDs. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file # Technically the key used by getlist('file')
              properties:
                file: # Although named 'file', this can represent multiple files
                  type: array
                  items:
                    type: string
                    format: binary
                  description: One or more document files to upload.
      responses:
        '200':
          description: File(s) accepted for background processing. All files processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '207':
          description: Multi-Status. Some files processed, but errors occurred with others. Check 'errors' array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          description: Bad Request (No file part, no files selected, all files invalid type or failed initial save/queue). Check 'errors' array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse' # May still contain errors array
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Unexpected error during queuing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' # Or DocumentUploadResponse with a generic error

  /documents:
    get:
      tags:
        - Documents
      summary: Get user's documents with pagination and filtering
      description: Retrieves a paginated list of documents uploaded by the authenticated user, with filtering options. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number to retrieve.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            # maximum: 100 # Consider adding a max limit
          description: The number of documents per page.
        - name: search
          in: query
          schema:
            type: string
          description: Search term for file name or title (case-insensitive).
        - name: classification
          in: query
          schema:
            type: string
          description: Filter by document classification category (case-sensitive). Use 'none' to find unclassified.
        - name: author
          in: query
          schema:
            type: string
          description: Filter by author (case-insensitive, exact match in authors array).
        - name: keywords
          in: query
          schema:
            type: string
          description: Filter by keyword (case-insensitive, exact match in keywords array).
        - name: abstract
          in: query
          schema:
            type: string
          description: Search within the document abstract (case-insensitive).
      responses:
        '200':
          description: List of documents retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentMetadata'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
                  needs_legacy_update_check:
                    type: boolean
                    description: Indicates if there are documents needing the legacy update process.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_id}:
    get:
      tags:
        - Documents
      summary: Get details of a specific user document
      description: Retrieves the metadata for a single document owned by the authenticated user. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to retrieve.
      responses:
        '200':
          description: Document metadata retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadata'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Documents
      summary: Update metadata of a user document
      description: Partially updates the metadata fields (like title, abstract, keywords, classification, authors, publication date) of a specific document owned by the authenticated user. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title for the document.
                abstract:
                  type: string
                  description: New abstract for the document.
                keywords:
                  type: array | string # Code handles both list and comma-separated string
                  items:
                    type: string
                  description: New list of keywords (or comma-separated string).
                publication_date:
                  type: string
                  # format: date-time # Or date string depending on how it's stored/validated
                  description: New publication date.
                document_classification:
                  type: string
                  description: New classification category.
                authors:
                  type: array | string # Code handles both list and single string
                  items:
                    type: string
                  description: New list of authors (or single author string).
      responses:
        '200':
          description: Document metadata updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document metadata updated successfully"
        '400':
          description: Bad Request (Invalid data format - although code doesn't explicitly check types)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found (Implicit check in update_document function)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Documents
      summary: Delete a user document
      description: Deletes a document metadata record and its associated chunks from the search index for a document owned by the authenticated user. Requires `enable_user_workspace` setting to be true and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to delete.
      responses:
        '200':
          description: Document deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled or user does not own document - implicit check in delete_document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found (Implicit check in delete_document function)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to delete document or chunks)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_id}/extract_metadata:
    post:
      tags:
        - Documents
      summary: Queue metadata extraction for a document
      description: Queues a background job to extract metadata (like title, authors, etc.) from the document content using an AI model. Requires `enable_user_workspace` and `enable_extract_meta_data` settings to be true and user authentication. Checks ownership implicitly.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document for metadata extraction.
      responses:
        '200': # Code returns 200 immediately
          description: Metadata extraction task queued successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Metadata extraction has been queued. Check document status periodically."
                  document_id:
                    type: string
                    format: uuid
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` or `enable_extract_meta_data` disabled, or user does not own document - implicit check)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found (Implicit check in background task initiation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to queue task)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /get_citation:
    post:
      tags:
        - Documents
      summary: Get citation text by ID
      description: Retrieves the text content and basic metadata for a specific citation (chunk) ID from the user's or group's search index. Requires `enable_user_workspace` setting to be true (for user check) and user authentication. Checks user ownership for user citations.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - citation_id
              properties:
                citation_id:
                  type: string
                  description: The ID of the citation (chunk) to retrieve from the search index.
      responses:
        '200':
          description: Citation details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cited_text:
                    type: string
                  file_name:
                    type: string
                  page_number:
                    type: integer # Or string depending on chunk_sequence type
        '400':
          description: Bad Request (Missing citation_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled or unauthorized access to user citation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Citation not found in user or group search index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Search client error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/upgrade_legacy:
    post:
      tags:
        - Documents
        - Admin # Often an admin-triggered action
      summary: Upgrade legacy user documents
      description: Triggers a process to update user documents created before a schema change (e.g., adding `percentage_complete`). Requires `enable_user_workspace` and user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Legacy document upgrade process completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upgraded 5 document(s) to the new format."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Upgrade process failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Feedback Routes (route_backend_feedback.py) ---
  /feedback/submit:
    post:
      tags:
        - Feedback
      summary: Submit feedback for a message
      description: Allows authenticated users to submit feedback (e.g., 'Positive', 'Negative', 'Neutral') on a specific AI message within a conversation. Requires `enable_user_feedback` setting to be true.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messageId
                - conversationId
                - feedbackType
              properties:
                messageId:
                  type: string
                  description: The ID ('id' field from Message schema) of the AI message receiving feedback.
                conversationId:
                  type: string
                  format: uuid
                  description: The ID of the conversation containing the message.
                feedbackType:
                  type: string
                  enum: [Positive, Negative, Neutral] # Based on code implementation
                  description: The type of feedback.
                reason:
                  type: string
                  description: Optional reason or comment for the feedback.
      responses:
        '200':
          description: Feedback submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  feedbackId:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Missing required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_feedback` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        # 404 for conversation not found isn't explicitly handled but might occur in DB lookup
        '500':
          description: Internal Server Error (Failed to query messages or save feedback)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/review:
    get:
      tags:
        - Feedback
        - Admin
      summary: Get feedback items for admin review (paginated)
      description: Retrieves submitted feedback items for administrative review, with pagination and filtering options. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`feedback_admin_required`) and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            enum: [10, 20, 50] # Allowed sizes based on code
          description: Items per page.
        - name: type
          in: query
          schema:
            type: string
            enum: [Positive, Negative, Neutral]
          description: Filter by feedback type.
        - name: ack
          in: query
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter by acknowledged status ('true' or 'false').
      responses:
        '200':
          description: List of feedback items retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedback:
                    type: array
                    items:
                      $ref: '#/components/schemas/FeedbackItem'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
                  total_pages:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/review/{feedbackId}:
    get:
      tags:
        - Feedback
        - Admin
      summary: Get a single feedback item (Admin)
      description: Fetches the details of a single feedback item by its ID. Needed for editing after pagination. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`feedback_admin_required`) and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the feedback item to retrieve.
      responses:
        '200':
          description: Feedback item retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Feedback item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Feedback
        - Admin
      summary: Update admin review fields for a feedback item (Admin)
      description: Allows admins to update the review status (`acknowledged`) and associated notes/actions for a specific feedback item. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`feedback_admin_required`) and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the feedback item to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledged:
                  type: boolean
                  description: Set to true to mark as reviewed/acknowledged.
                analysisNotes:
                  type: string
                  nullable: true
                  description: Admin's notes on the feedback.
                responseToUser:
                  type: string
                  nullable: true
                  description: Any response communicated back to the user (if applicable).
                actionTaken:
                  type: string
                  nullable: true
                  description: Description of any corrective action taken based on the feedback.
      responses:
        '200':
          description: Feedback item updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad Request (Invalid data format - unlikely with current code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Feedback item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/retest/{feedbackId}:
    post:
      tags:
        - Feedback
        - Admin
      summary: Retest a prompt from feedback (Admin)
      description: Allows admins to re-run the original user prompt (provided in the request body, typically sourced from the feedback item) against the current AI model configuration to check for improvements. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`feedback_admin_required`) and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the feedback item context (used for authorization/logging, prompt sent in body).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                  description: The user prompt extracted from the feedback item to be retested.
      responses:
        '200':
          description: Retest completed successfully (returns placeholder response in current code).
          content:
            application/json:
              schema:
                type: object
                properties:
                  retestResponse:
                    type: string
                    description: The new response generated by the AI model for the prompt.
        '400':
          description: Bad Request (Missing prompt in request body)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to run prompt against AI model)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/my:
    get:
      tags:
        - Feedback
      summary: Get feedback submitted by the current user (paginated)
      description: Retrieves feedback items submitted by the currently authenticated user, with pagination and filtering options. Requires `enable_user_feedback` setting to be true.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: type
          in: query
          schema:
            type: string
            enum: [Positive, Negative, Neutral]
          description: Filter by feedback type.
        - name: ack
          in: query
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter by acknowledged status ('true' or 'false').
      responses:
        '200':
          description: User's feedback items retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedback:
                    type: array
                    items:
                      $ref: '#/components/schemas/FeedbackItem' # Read-only view for user
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
                  # total_pages might be useful here too
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_feedback` disabled or user ID not found in session)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Group Document Routes (route_backend_group_documents.py) ---
  /group_documents:
    get:
      tags:
        - Group Documents
        - Groups
      summary: Get documents for the active group (paginated)
      description: Retrieves a paginated list of documents associated with the user's currently active group, with filtering options. Requires `enable_group_workspaces` setting to be true and user membership in the active group.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number to retrieve.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: The number of documents per page.
        - name: search
          in: query
          schema:
            type: string
          description: Search term for file name or title (case-insensitive).
        - name: classification
          in: query
          schema:
            type: string
          description: Filter by document classification category (case-sensitive). Use 'none' for unclassified.
        - name: author
          in: query
          schema:
            type: string
          description: Filter by author (case-insensitive, exact match in authors array).
        - name: keywords
          in: query
          schema:
            type: string
          description: Filter by keyword (case-insensitive, exact match in keywords array).
        - name: abstract
          in: query
          schema:
            type: string
          description: Search within the document abstract (case-insensitive).
      responses:
        '200':
          description: Group documents retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupDocumentMetadata' # Using specific schema
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
                  needs_legacy_update_check:
                    type: boolean
                    description: Indicates if there are legacy documents needing update.
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not a member of the active group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/upload:
    post:
      tags:
        - Group Documents
        - Groups
      summary: Upload document(s) to the active group
      description: Uploads one or more documents to the user's active group. Requires appropriate role (Owner, Admin, DocumentManager) in the group, `enable_group_workspaces` setting to be true, and user authentication. Triggers background processing.
      security:
        - bearerAuth: [] # Role check via decorator
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: One or more document files to upload.
      responses:
        '200':
          description: File(s) accepted for background processing. All processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse' # Reusing user upload response schema
        '207':
          description: Multi-Status. Some files processed, but errors occurred with others. Check 'errors' array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          description: Bad Request (No active group, no file part, no files selected, all failed). Check 'errors' array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in the group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to queue processing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/{document_id}:
    get:
      tags:
        - Group Documents
        - Groups
      summary: Get details of a specific group document
      description: Retrieves metadata for a document within the user's active group. Requires user membership in the active group, `enable_group_workspaces` setting to be true, and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            # format: uuid # If group doc IDs are UUIDs
          description: The ID of the group document to retrieve.
      responses:
        '200':
          description: Group document metadata retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDocumentMetadata'
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not a member of the active group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group or Document not found within the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Group Documents
        - Groups
      summary: Update metadata of a group document
      description: Partially updates metadata fields of a document in the active group. Requires specific role (Owner, Admin, DocumentManager) in the group, `enable_group_workspaces` setting to be true, and user authentication.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            # format: uuid
          description: The ID of the group document to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                abstract:
                  type: string
                keywords:
                  type: array | string # List or comma-separated string
                  items:
                    type: string
                publication_date:
                  type: string
                  # format: date-time / date
                document_classification:
                  type: string
                authors:
                  type: array | string # List or single string
                  items:
                    type: string
      responses:
        '200':
          description: Group document metadata updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group document metadata updated successfully"
        '400':
          description: Bad Request (No active group selected, invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group or Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Group Documents
        - Groups
      summary: Delete a document from the active group
      description: Deletes a document and its associated chunks from the active group. Requires specific role (Owner, Admin, DocumentManager) in the group, `enable_group_workspaces` setting to be true, and user authentication.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            # format: uuid
          description: The ID of the document to delete from the active group.
      responses:
        '200':
          description: Group document deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group document deleted successfully"
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group or Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Deletion failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/{document_id}/extract_metadata:
    post:
      tags:
        - Group Documents
        - Groups
      summary: Queue metadata extraction for a group document
      description: Queues a background job to extract metadata from a document within the active group. Requires specific role (Owner, Admin, DocumentManager) in the group, `enable_group_workspaces` and `enable_extract_meta_data` settings to be true, and user authentication.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            # format: uuid
          description: The ID of the group document for metadata extraction.
      responses:
        '200': # Code returns 200
          description: Group metadata extraction task queued successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group metadata extraction has been queued. Check document status periodically."
                  document_id:
                    type: string
                    # format: uuid
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` or `enable_extract_meta_data` disabled, or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group or Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to queue task)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/upgrade_legacy:
    post:
      tags:
        - Group Documents
        - Groups
        - Admin # Often an admin/owner action
      summary: Upgrade legacy group documents
      description: Triggers a process to update documents in the active group that were created before a schema change. Requires specific role (Owner, Admin, DocumentManager) in the group, `enable_group_workspaces` setting to be true, and user authentication.
      security:
        - bearerAuth: [] # Role check via decorator
      responses:
        '200':
          description: Legacy group document upgrade process completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upgraded 3 group document(s) to the new format."
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Upgrade process failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  # --- Group Prompt Routes (route_backend_group_prompts.py) ---
  /group_prompts:
    get:
      tags:
        - Group Prompts
        - Groups
      summary: Get prompts for the active group (paginated)
      description: Retrieves a paginated list of prompts associated with the user's currently active group. Requires `enable_group_workspaces` setting to be true and user membership in the group.
      security:
        - bearerAuth: []
      parameters:
        # Add pagination/filtering params based on list_prompts implementation if needed
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term for prompt name.
      responses:
        '200':
          description: Group prompts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupPrompt'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not in group - implicit check)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Group Prompts
        - Groups
      summary: Create a new prompt for the active group
      description: Creates a new shared prompt within the user's active group. Requires `enable_group_workspaces` setting to be true and user membership in the group (permission to create might depend on role).
      security:
        - bearerAuth: [] # Role check logic inside if needed based on group policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  description: The name/title of the prompt.
                content:
                  type: string
                  description: The text content of the prompt.
      responses:
        '201': # Code returns 201
          description: Group prompt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt' # Returns the created prompt
        '400':
          description: Bad Request (Missing name/content or no active group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database create failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_prompts/{prompt_id}:
    get:
      tags:
        - Group Prompts
        - Groups
      summary: Get a specific group prompt
      description: Retrieves the details of a single prompt belonging to the user's active group. Requires `enable_group_workspaces` setting to be true and user membership in the group.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to retrieve.
      responses:
        '200':
          description: Group prompt retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt'
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Group Prompts
        - Groups
      summary: Update a group prompt
      description: Updates the name and/or content of a specific prompt within the user's active group. Requires `enable_group_workspaces` setting to be true and user membership (permission to update might depend on role or creator).
      security:
        - bearerAuth: [] # Permission check logic inside
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1 # Must provide at least name or content
              properties:
                name:
                  type: string
                  description: The new name for the prompt.
                content:
                  type: string
                  description: The new content for the prompt.
      responses:
        '200':
          description: Group prompt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt' # Returns the updated prompt
        '400':
          description: Bad Request (No active group selected, invalid data, or no fields provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Group Prompts
        - Groups
      summary: Delete a group prompt
      description: Deletes a specific prompt from the user's active group. Requires `enable_group_workspaces` setting to be true and user membership (permission to delete might depend on role or creator).
      security:
        - bearerAuth: [] # Permission check logic inside
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to delete.
      responses:
        '200':
          description: Group prompt deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Prompt deleted successfully"
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database delete failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Group Management Routes (route_backend_groups.py) ---
  /groups/discover:
    get:
      tags:
        - Groups
      summary: Discover available groups
      description: Returns a list of groups, optionally filtered by search term and whether to include groups the user is already a member of. Requires `enable_group_workspaces` setting to be true and user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter groups by name or description (case-insensitive).
        - name: showAll
          in: query
          schema:
            type: boolean
            default: false
          description: If true, includes groups the user is already a member of. Defaults to false (only shows groups the user is NOT in).
      responses:
        '200':
          description: List of discoverable groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDiscoveryItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups:
    get:
      tags:
        - Groups
      summary: List groups the user is a member of (paginated)
      description: Retrieves a paginated list of groups the authenticated user belongs to, optionally filtered by a search term. Includes the user's role in each group and marks the active group. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter groups by name or description.
      responses:
        '200':
          description: Paginated list of user's groups.
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserGroupItem'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query or user settings read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Creates a new group with the authenticated user as the owner. Requires `enable_group_workspaces` setting to be true and potentially specific AD group membership (`create_group_role_required` decorator).
      security:
        - bearerAuth: [] # Role check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "Untitled Group"
                  description: Name for the new group.
                description:
                  type: string
                  description: Optional description for the group.
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
        '400':
          description: Bad Request (e.g., validation error, DB error during creation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions/role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Unexpected error during creation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}:
    get:
      tags:
        - Groups
      summary: Get group details
      description: Retrieves the full details of a specific group, including owner, members list, admins, etc. Requires `enable_group_workspaces` setting to be true. User must typically be a member to view details (checked implicitly by `find_group_by_id` if it filters).
      security:
        - bearerAuth: [] # Membership check likely happens inside or should be added
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to retrieve.
      responses:
        '200':
          description: Group details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not member/allowed to view)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Groups
      summary: Delete a group (Owner only)
      description: Deletes an entire group. Only the group owner can perform this action. Requires `enable_group_workspaces` setting to be true and potentially `create_group_role_required` permission.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to delete.
      responses:
        '200':
          description: Group deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled, user is not the owner, or insufficient role permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database delete failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch: # Also handles PUT in the code
      tags:
        - Groups
      summary: Update group details (Owner only)
      description: Updates the name and/or description of a group. Only the group owner can perform this action. Requires `enable_group_workspaces` setting to be true and potentially `create_group_role_required` permission.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the group.
                description:
                  type: string
                  description: The new description for the group.
      responses:
        '200':
          description: Group updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group updated"
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Validation error, DB update error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled, user is not the owner, or insufficient role permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Unexpected error during update)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put: # Duplicate entry for PUT, mirroring PATCH functionality as per code
      tags:
        - Groups
      summary: Update group details (Owner only) - PUT
      description: Updates the name and/or description of a group using PUT. Only the group owner can perform this action. Requires `enable_group_workspaces` setting to be true and potentially `create_group_role_required` permission.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the group.
                description:
                  type: string
                  description: The new description for the group.
      responses:
        '200':
          description: Group updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group updated"
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Validation error, DB update error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled, user is not the owner, or insufficient role permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Unexpected error during update)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /groups/setActive:
    patch:
      tags:
        - Groups
        - Users # Also relates to user preference
      summary: Set the user's active group
      description: Updates the authenticated user's settings to mark a specific group as their active group for subsequent operations (like viewing group documents or chat scope). Requires `enable_group_workspaces` setting to be true. User must be a member of the target group.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
              properties:
                groupId:
                  type: string
                  format: uuid
                  description: The ID of the group to set as active.
      responses:
        '200':
          description: Active group updated successfully in user settings.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Active group set to {group_id}"
        '400':
          description: Bad Request (Missing groupId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not a member of the target group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Target Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to update user settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/requests:
    post:
      tags:
        - Groups
      summary: Request to join a group
      description: Allows an authenticated user to submit a request to join a specific group. Adds the user to the group's 'pendingUsers' list if they are not already a member or pending. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: []
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group the user wants to join.
      responses:
        '201':
          description: Membership request created successfully and added to pending list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Membership request created"
        '400':
          description: Bad Request (User is already a member or has already requested to join)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Groups
      summary: View pending membership requests (Owner/Admin only)
      description: Retrieves the list of users currently pending approval to join the specified group. Requires the requesting user to have 'Owner' or 'Admin' role in the group and `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group whose pending requests are to be viewed.
      responses:
        '200':
          description: List of pending users retrieved successfully. Returns empty list if no pending requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/requests/{request_id}:
    patch:
      tags:
        - Groups
      summary: Approve or reject a membership request (Owner/Admin only)
      description: Allows a group Owner or Admin to approve or reject a pending membership request, identified by the requesting user's ID (`request_id`). Approving moves the user from 'pendingUsers' to 'users'. Rejecting removes them from 'pendingUsers'. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group containing the request.
        - name: request_id
          in: path
          required: true
          schema:
            type: string # User ID might not be UUID format
          description: The User ID of the pending request (the user requesting to join).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [approve, reject]
                  description: Action to perform ('approve' or 'reject').
      responses:
        '200':
          description: Request processed successfully (approved or rejected).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string # e.g., "User approved and added as a member" or "User rejected"
        '400':
          description: Bad Request (Invalid or missing 'action')
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Pending Request (by request_id) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/members:
    post:
      tags:
        - Groups
      summary: Add a member directly to a group (Owner/Admin only)
      description: Allows a group Owner or Admin to add a user directly to the group's 'users' list, bypassing the request/approval flow. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to add a member to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: The ID of the user to add.
                email:
                  type: string
                  format: email
                  nullable: true
                  description: Email of the user (optional).
                displayName:
                  type: string
                  nullable: true
                  description: Display name of the user (optional).
      responses:
        '200':
          description: Member added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Member added"
        '400':
          description: Bad Request (Missing userId or user is already a member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Groups
      summary: View group members (filtered)
      description: Retrieves the list of members for a specific group, including their calculated role (Owner, Admin, DocumentManager, User). Allows filtering by search term (name/email) and role. Requires `enable_group_workspaces` setting to be true and user membership in the group.
      security:
        - bearerAuth: [] # Membership check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group whose members are to be viewed.
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter members by display name or email (case-insensitive).
        - name: role
          in: query
          schema:
            type: string
            enum: [Owner, Admin, DocumentManager, User]
          description: Optional filter to show only members with a specific role.
      responses:
        '200':
          description: List of group members retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMember'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user not a member of this group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/members/{member_id}:
    delete:
      tags:
        - Groups
      summary: Remove a member from a group
      description: Removes a specified user (`member_id`) from a group (`group_id`). Users can remove themselves (if not the owner). Owner/Admin can remove other members (but not the owner). Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Permission checks inside based on who is removing whom
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
        - name: member_id
          in: path
          required: true
          schema:
            type: string # User ID
          description: The ID of the member to remove.
      responses:
        '200':
          description: Member removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string # e.g., "User removed" or "You have left the group"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled, insufficient permissions - e.g., trying to remove owner, non-admin trying to remove others, owner trying to remove self)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Member not found in the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Groups
      summary: Update a member's role (Owner/Admin only)
      description: Changes the role of an existing member (`member_id`) within the group (`group_id`) to 'Admin', 'DocumentManager', or 'User'. Only Owner or Admin can perform this action. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
        - name: member_id
          in: path
          required: true
          schema:
            type: string # User ID
          description: The ID of the member whose role is to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [Admin, DocumentManager, User]
                  description: The new role to assign. 'User' effectively removes Admin/DocManager roles.
      responses:
        '200':
          description: Member role updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {member_id} updated to {new_role}"
        '400':
          description: Bad Request (Invalid role specified)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or insufficient permissions - not Owner/Admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Member not found in the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/transferOwnership:
    patch:
      tags:
        - Groups
      summary: Transfer group ownership (Owner only)
      description: Transfers ownership of the specified group (`group_id`) to another existing member (`newOwnerId`). Only the current group owner can initiate this action. The old owner is automatically demoted to a regular user role. Requires `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Owner check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newOwnerId
              properties:
                newOwnerId:
                  type: string # User ID
                  description: The ID of the existing group member who will become the new owner.
      responses:
        '200':
          description: Ownership transferred successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ownership transferred successfully"
        '400':
          description: Bad Request (Missing newOwnerId or the specified new owner is not currently a member of the group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or the requesting user is not the current owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/fileCount:
    get:
      tags:
        - Groups
        - Admin # Often an admin/owner feature
      summary: Get the number of files in a group (Owner only)
      description: Returns the total count of documents associated with the specified group (`group_id`). Requires the requesting user to be the group owner and `enable_group_workspaces` setting to be true.
      security:
        - bearerAuth: [] # Owner check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
      responses:
        '200':
          description: File count retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  fileCount:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_group_workspaces` disabled or user is not the owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Model Routes (route_backend_models.py) ---
  /models/gpt:
    get:
      tags:
        - Models
        - Admin # Often needed for config
      summary: Get available GPT models/deployments
      description: Retrieves a list of available GPT-like model deployments (e.g., 'gpt-4', 'gpt-35-turbo') from the Azure OpenAI resource configured in the application settings (using Azure Management SDK). Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of GPT models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure GPT Model subscription/RG/endpoint not configured in settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Could also indicate issues with service principal credentials for Azure Mgmt SDK)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API, check service principal permissions and config)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /models/embedding:
    get:
      tags:
        - Models
        - Admin
      summary: Get available Embedding models/deployments
      description: Retrieves a list of available Embedding model deployments (e.g., 'text-embedding-ada-002') from the configured Azure OpenAI resource using Azure Management APIs. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Embedding models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure Embedding Model subscription/RG/endpoint not configured in settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Could also indicate issues with service principal credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /models/image:
    get:
      tags:
        - Models
        - Admin
      summary: Get available Image Generation models/deployments
      description: Retrieves a list of available DALL-E model deployments from the configured Azure OpenAI resource using Azure Management APIs. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Image Generation models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure Image Model subscription/RG/endpoint not configured in settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Could also indicate issues with service principal credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- User Prompt Routes (route_backend_prompts.py) ---
  /prompts:
    get:
      tags:
        - Prompts
      summary: Get user's saved prompts (paginated)
      description: Retrieves a paginated list of prompts saved by the authenticated user. Requires `enable_user_workspace` setting to be true. Filtering via query params may be supported by `list_prompts`.
      security:
        - bearerAuth: []
      parameters:
        # Add pagination/filtering params based on list_prompts implementation
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term for prompt name.
      responses:
        '200':
          description: User prompts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPrompt'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Prompts
      summary: Create a new user prompt
      description: Creates and saves a new personal prompt for the authenticated user. Requires `enable_user_workspace` setting to be true.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  description: The name/title of the prompt. Cannot be empty.
                content:
                  type: string
                  description: The text content of the prompt. Cannot be empty.
      responses:
        '201': # Code returns 201
          description: User prompt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt' # Returns the created prompt
        '400':
          description: Bad Request (Missing or invalid name or content)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database create failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prompts/{prompt_id}:
    get:
      tags:
        - Prompts
      summary: Get a specific user prompt
      description: Retrieves the details of a single prompt saved by the authenticated user. Requires `enable_user_workspace` setting to be true. Checks ownership.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to retrieve.
      responses:
        '200':
          description: User prompt retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found or access denied (not owned by user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Prompts
      summary: Update a user prompt
      description: Updates the name and/or content of a specific prompt saved by the authenticated user. Requires `enable_user_workspace` setting to be true. Checks ownership.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1 # Must provide at least name or content
              properties:
                name:
                  type: string
                  description: The new name for the prompt (must be non-empty if provided).
                content:
                  type: string
                  description: The new content for the prompt.
      responses:
        '200':
          description: User prompt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt' # Returns the updated prompt
        '400':
          description: Bad Request (Invalid or missing name/content, or no fields provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found or access denied (not owned by user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Prompts
      summary: Delete a user prompt
      description: Deletes a specific prompt saved by the authenticated user. Requires `enable_user_workspace` setting to be true. Checks ownership.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to delete.
      responses:
        '200':
          description: User prompt deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Prompt deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_user_workspace` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found or access denied (not owned by user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database delete failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Safety Routes (route_backend_safety.py) ---
  /safety/logs:
    get:
      tags:
        - Safety
        - Admin
      summary: Get all content safety logs (Admin, paginated)
      description: Retrieves recorded content safety violation logs with pagination and filtering. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`safety_violation_admin_required`) and `enable_content_safety` setting.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: status
          in: query
          schema:
            type: string
          description: Filter logs by admin-assigned status.
        - name: action
          in: query
          schema:
            type: string
          description: Filter logs by admin-assigned action taken.
      responses:
        '200':
          description: Paginated safety logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/SafetyLog'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature `enable_content_safety` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/{log_id}:
    patch:
      tags:
        - Safety
        - Admin
      summary: Update a safety log entry (Admin)
      description: Allows an administrator to update the `status`, `action` taken, and administrative `notes` for a specific content safety log entry. Sets `last_updated` timestamp. Requires admin privileges (`admin_required`) and potentially specific AD group membership (`safety_violation_admin_required`) and `enable_content_safety`.
      security:
        - bearerAuth: [] # Admin/role check via decorators
      parameters:
        - name: log_id
          in: path
          required: true
          schema:
            type: string
            format: uuid # Assuming log_id is UUID
          description: The ID of the safety log entry to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  nullable: true
                  description: New status for the log (e.g., 'Reviewed', 'ActionTaken', 'Dismissed').
                action:
                  type: string
                  nullable: true
                  description: Description of the action taken regarding the violation.
                notes:
                  type: string
                  nullable: true
                  description: Administrative notes about the review or action.
      responses:
        '200':
          description: Safety log updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Safety log updated successfully."
        '400':
          description: Bad Request (Invalid data format - unlikely with current code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin/required role or feature `enable_content_safety` disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Safety log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/my:
    get:
      tags:
        - Safety
      summary: Get current user's safety logs (paginated)
      description: Retrieves content safety violation logs pertaining only to the currently authenticated user, with pagination and filtering options. Requires `enable_content_safety` setting to be true.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Items per page.
        - name: status
          in: query
          schema:
            type: string
          description: Filter logs by admin-assigned status.
        - name: action
          in: query
          schema:
            type: string
          description: Filter logs by admin-assigned action taken.
      responses:
        '200':
          description: User's safety logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/SafetyLog' # Read-only view for user
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_content_safety` disabled or user ID not found in session)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database query failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/my/{log_id}:
    patch:
      tags:
        - Safety
      summary: Update user notes on their safety log
      description: Allows the authenticated user to add or update their own notes (`user_notes`) on a specific safety log entry belonging to them. Requires `enable_content_safety` setting to be true. Checks ownership.
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user's safety log entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_notes:
                  type: string
                  nullable: true # Allow clearing notes
                  description: Notes provided by the user regarding the safety log entry.
      responses:
        '200':
          description: Safety log updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Safety log updated successfully."
        '400':
          description: Bad Request (Invalid data format - unlikely)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature `enable_content_safety` disabled or log does not belong to user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Safety log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Database read or update failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Settings Routes (route_backend_settings.py) ---
  /admin/settings/check_index_fields:
    post:
      tags:
        - Settings
        - Admin
      summary: Check for missing AI Search index fields (Admin)
      description: Compares the current Azure AI Search index schema against an expected ('golden') schema definition stored locally and returns any missing fields. Requires admin privileges.
      security:
        - bearerAuth: [] # Admin check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - indexType
              properties:
                indexType:
                  type: string
                  enum: [user, group]
                  description: Specifies which index to check ('user' or 'group').
      responses:
        '200':
          description: Check completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  missingFields:
                    type: array
                    items:
                      type: string
                    description: A list of field names present in the expected schema but missing in the current index. Empty if index is up-to-date.
        '400':
          description: Bad Request (Missing or invalid indexType)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
           description: Index not found on Azure AI Search service
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to read local schema file, AI Search connection error, or schema comparison error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/settings/fix_index_fields:
    post:
      tags:
        - Settings
        - Admin
      summary: Add missing fields to AI Search index (Admin)
      description: Adds fields found to be missing (via check_index_fields) to the specified Azure AI Search index based on the local 'golden' schema definition. Requires admin privileges.
      security:
        - bearerAuth: [] # Admin check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - indexType
              properties:
                indexType:
                  type: string
                  enum: [user, group]
                  description: Specifies which index to fix ('user' or 'group').
      responses:
        '200':
          description: Index update attempt completed. Status indicates result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, nothingToAdd]
                    description: "'success' if fields were added, 'nothingToAdd' if index was already up-to-date."
                  added:
                    type: array
                    items:
                      type: string
                    description: List of field names that were successfully added (only present if status is 'success').
        '400':
          description: Bad Request (Missing or invalid indexType)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
           description: Index not found on Azure AI Search service
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to read local schema, AI Search connection error, or failed to update index)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/settings/test_connection:
    post:
      tags:
        - Settings
        - Admin
      summary: Test connection for various backend services (Admin)
      description: Allows administrators to test connectivity to configured backend services (GPT, Embedding, Safety, Search, etc.) using ephemeral settings provided in the request body, without saving them. Requires admin privileges. **Note:** The request body structure varies depending on `test_type`. See implementation for specific required fields per type.
      security:
        - bearerAuth: [] # Admin check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - test_type
              properties:
                test_type:
                  type: string
                  enum: [gpt, embedding, image, safety, web_search, azure_ai_search, azure_doc_intelligence, chunking_api]
                  description: Specifies which service connection to test.
                # ... other properties specific to each test_type are sent ...
                # Define full examples or use `anyOf`/`oneOf` if feasible,
                # but documenting in description might be more practical here.
              example: # Example for testing GPT direct with key
                test_type: "gpt"
                enable_apim: false
                direct:
                  endpoint: "https://YOUR_AOAI_INSTANCE.openai.azure.com/"
                  api_version: "2024-02-01"
                  auth_type: "key"
                  key: "YOUR_AOAI_KEY"
                selected_model:
                  deploymentName: "gpt-4"
      responses:
        '200':
          description: Connection test successful (or skipped if service disabled in payload).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "GPT connection successful"
        '400':
          description: Bad Request (Unknown test_type or missing required fields for the specified test)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Connection test failed - specific error in response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' # The error message will contain details

  # --- User Routes (route_backend_users.py) ---
  /userSearch:
    get:
      tags:
        - Users
      summary: Search for users via Microsoft Graph
      description: Searches for users in the organization's Azure Active Directory based on display name, email, or User Principal Name using the Microsoft Graph API. Requires user authentication and appropriate Graph API permissions for the application registration.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true # Code requires a non-empty query
          schema:
            type: string
            minLength: 1
          description: The search term (prefix) to query against user display name, mail, or UPN.
      responses:
        '200':
          description: List of matching users (up to 10). Returns empty list if no matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResult'
        '401':
          description: Unauthorized (Invalid or missing authentication token, or insufficient Graph API permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500': # Or other Graph API error codes (e.g., 403 if permissions missing)
          description: Internal Server Error or Microsoft Graph API request failed. Check details field.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Graph API request failed"
                  details:
                    type: object # Or string depending on Graph error format
                    description: Detailed error information from Microsoft Graph.

  /user/settings:
    get:
      tags:
        - Users
        - Settings
      summary: Get current user's settings
      description: Retrieves the personalized settings document (including preferences like active group, layout) for the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User settings retrieved successfully. Returns empty object or default structure if no settings document exists yet for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDocument'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to retrieve settings from database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
        - Settings
      summary: Update current user's settings
      description: Updates specific fields within the authenticated user's settings document. Merges the provided settings with existing ones. Sets `last_updated` timestamp.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - settings
              properties:
                settings:
                  $ref: '#/components/schemas/UserSettings' # The inner settings object containing fields to update
      responses:
        '200':
          description: User settings updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User settings updated successfully"
        '400':
          description: Bad Request (Missing or invalid JSON body, 'settings' key missing or not an object)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to read or update settings in database)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: A description of the error that occurred.

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The user's message content.
        conversation_id:
          type: string
          format: uuid
          nullable: true
          description: The existing conversation ID. If null/missing, a new conversation is created.
        hybrid_search:
          type: boolean
          description: Whether to enable hybrid search augmentation (requires AI Search config).
          default: false
        selected_document_id:
          type: string
          # format: uuid # Can be non-uuid if chunk IDs are used directly? Confirm format.
          nullable: true
          description: If specified, scope hybrid search to this specific document ID (parent document).
        bing_search:
          type: boolean
          description: Whether to enable Bing web search augmentation (requires Bing config).
          default: false
        image_generation:
          type: boolean
          description: Whether to enable image generation instead of text response (requires Image Gen config).
          default: false
        doc_scope:
          type: string
          enum: [user, group, all] # Assuming these are the scopes implemented in hybrid_search
          description: The scope for document search ('user' personal workspace, 'group' active group, or 'all').
        active_group_id:
          type: string
          format: uuid
          nullable: true
          description: The user's active group ID, required if doc_scope is 'group'.
        model_deployment:
          type: string
          nullable: true
          description: Optional override for the GPT model deployment name to use for this request.

    ChatResponse:
      type: object
      properties:
        reply:
          type: string
          description: The AI's generated text response.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation (new or existing).
        conversation_title:
          type: string
          description: The current title of the conversation.
        classification:
          type: array
          items:
            type: string
          nullable: true # Can be empty if no classifications found/enabled
          description: List of classification labels associated with the conversation based on documents used.
        model_deployment_name:
          type: string
          description: The name of the GPT model deployment used for the response.
        message_id:
          type: string
          description: The unique ID assigned to the assistant's message ('id' field).
        blocked:
          type: boolean
          description: Always false for a successful text response.
          example: false
        augmented:
          type: boolean
          description: True if the response was augmented by search results (hybrid or web).
        hybrid_citations:
          type: array
          items:
            $ref: '#/components/schemas/HybridCitation'
          description: List of citations from hybrid search results potentially used in the response.
        web_search_citations:
          type: array
          items:
            $ref: '#/components/schemas/WebSearchCitation'
          description: List of citations from web search results potentially used in the response.

    ChatBlockedResponse:
      type: object
      properties:
        reply:
          type: string
          description: Message indicating the content was blocked by safety filters and why.
        blocked:
          type: boolean
          description: Always true when content safety blocks the message.
          example: true
        triggered_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCategory'
          description: List of content safety categories triggered.
        blocklist_matches:
          type: array
          items:
            $ref: '#/components/schemas/BlocklistMatch'
          description: List of matched terms from content safety blocklists.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation.
        conversation_title:
          type: string
          description: The current title of the conversation.
        message_id:
          type: string
          description: The unique ID assigned to the safety message ('id' field).

    ImageResponse:
      type: object
      properties:
        reply:
          type: string
          description: Placeholder text like "Image loading...".
        image_url:
          type: string
          format: url
          description: The URL of the generated image.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation.
        conversation_title:
          type: string
          description: The current title of the conversation.
        model_deployment_name:
          type: string
          description: The name of the image generation model deployment used.
        message_id:
          type: string
          description: The unique ID assigned to the image message ('id' field).

    HybridCitation:
      type: object
      description: Metadata about a document chunk retrieved via hybrid search.
      properties:
        file_name:
          type: string
          description: Name of the source file.
        citation_id:
          type: string # This is the chunk ID from the search index
          description: Unique ID of the cited chunk (from search index 'id' field).
        page_number:
          type: integer # Or string, based on source field 'page_number' or 'chunk_sequence'
          description: Page number where the chunk originated, if available.
        chunk_id:
          type: string # Chunk ID again? Maybe redundant if citation_id is the chunk ID. Confirm source.
          description: Unique ID of the chunk.
        chunk_sequence:
          type: integer
          description: Sequence number of the chunk within the document.
        score:
          type: number
          format: float
          description: Relevance score from the search query.
        group_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the group the document belongs to, if applicable.
        version:
          type: string
          nullable: true
          description: Version information of the document, if available.
        classification:
          type: string
          nullable: true
          description: Classification category of the source document.
        chunk_text:
          type: string
          description: The actual text content of the chunk retrieved.

    WebSearchCitation:
      type: object
      description: Metadata about a web page retrieved via Bing search.
      properties:
        title:
          type: string
          description: Title of the web page.
        url:
          type: string
          format: url
          description: URL of the web page.
        snippet:
          type: string
          description: Snippet of text from the web page used in the prompt.

    TriggeredCategory:
      type: object
      description: Content safety category analysis result.
      properties:
        category:
          type: string
          enum: [Hate, SelfHarm, Sexual, Violence] # Check Azure Content Safety docs for exact, up-to-date values
          description: The detected harmful content category.
        severity:
          type: integer
          format: int32
          description: Severity score (0-N, check Azure docs). Higher is more severe.

    BlocklistMatch:
      type: object
      description: Details of a match found in a content safety blocklist.
      properties:
        blocklistName:
          type: string
          description: Name of the blocklist where the term was found.
        blocklistItemId:
          type: string
          description: ID of the specific item within the blocklist.
        blocklistItemText:
          type: string
          description: The actual text that matched the blocklist item.

    Message:
      type: object
      description: Represents a single message within a conversation.
      properties:
        id:
          type: string
          description: Unique message ID (e.g., 'convid_role_timestamp_rand').
        conversation_id:
          type: string
          format: uuid
          description: ID of the conversation this message belongs to.
        role:
          type: string
          enum: [user, assistant, system, file, image, safety, blocked] # Added blocked based on code
          description: The role of the message sender/type.
        content:
          type: string # Can be text, URL (for image), JSON string (for table), safety message.
          description: The main content of the message.
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the message was created/recorded.
        model_deployment_name:
          type: string
          nullable: true
          description: Name of the AI model deployment used (if applicable, e.g., for 'assistant' or 'image').
        # File specific fields (present if role == 'file')
        filename:
          type: string
          nullable: true # Only present for file role
          description: Original filename.
        is_table:
          type: boolean
          nullable: true # Only present for file role
          description: Indicates if file content is tabular.
        # Image specific fields (present if role == 'image')
        prompt:
          type: string
          nullable: true # Only present for image role
          description: The prompt used to generate the image.
        # Assistant specific fields (present if role == 'assistant')
        augmented:
          type: boolean
          nullable: true # Only present for assistant role
          description: Was the assistant response augmented by search results?
        hybrid_citations:
          type: array
          items:
            $ref: '#/components/schemas/HybridCitation'
          nullable: true # Only present for assistant role
          description: Citations from hybrid search used.
        hybridsearch_query:
          type: string
          nullable: true # Only present for assistant role if augmented by hybrid search
          description: The query sent to hybrid search for this response.
        web_search_citations:
          type: array
          items:
            $ref: '#/components/schemas/WebSearchCitation'
          nullable: true # Only present for assistant role
          description: Citations from web search used.
        user_message:
          type: string
          nullable: true # Only present for assistant/system message derived from a user turn
          description: The original user message that led to this assistant/system message.
        # Safety specific fields (present if role == 'safety'/'blocked')
        triggered_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCategory'
          nullable: true # Only present for safety/blocked role
        blocklist_matches:
          type: array
          items:
            $ref: '#/components/schemas/BlocklistMatch'
          nullable: true # Only present for safety/blocked role
      # Note: 'file_content' is intentionally omitted from list views (get_messages) as it can be large.

    ConversationSummary:
      type: object
      description: Basic information about a conversation, used in list views.
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string # User OID/Sub
          description: ID of the user who owns the conversation.
        last_updated:
          type: string
          format: date-time
          description: Timestamp of the last activity in the conversation.
        title:
          type: string
          description: Current title of the conversation.
        classification:
           type: array
           items:
             type: string
           nullable: true
           description: Classifications derived from documents used in the conversation.

    DocumentMetadata: # For user documents list/details
      type: object
      description: Metadata associated with a user-uploaded document.
      properties:
        id:
          type: string
          format: uuid
          description: Unique ID for the parent document metadata record.
        user_id:
          type: string
          description: ID of the user who uploaded the document.
        file_name:
          type: string
          description: Original filename of the uploaded document.
        status:
          type: string
          description: Processing status (e.g., 'Queued for processing', 'Processing', 'Completed', 'Error').
        uploaded_at:
          type: string
          format: date-time
          description: Timestamp when the document record was first created.
        num_file_chunks:
          type: integer
          nullable: true
          description: Number of chunks created for this document (updated during processing).
        percentage_complete:
          type: number
          format: float # Or integer
          nullable: true
          description: Processing completion percentage (0-100).
        title: # Extracted/Editable metadata
          type: string
          nullable: true
          description: Title of the document (extracted or manually set).
        abstract:
          type: string
          nullable: true
          description: Abstract or summary of the document.
        keywords:
          type: array
          items:
            type: string
          nullable: true
          description: List of keywords associated with the document.
        publication_date:
          type: string
          # format: date-time # Or just date string? Needs consistency
          nullable: true
          description: Publication date of the document.
        document_classification:
          type: string
          nullable: true
          description: Assigned classification category.
        authors:
          type: array
          items:
            type: string
          nullable: true
          description: List of authors of the document.
        # Add other relevant fields like _ts (Cosmos timestamp) if needed for display/sorting

    DocumentUploadResponse:
      type: object
      description: Response after attempting to upload one or more documents.
      properties:
        message:
          type: string
          description: Overall status message.
          example: "Processed 2 file(s). Check status periodically."
        document_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of IDs assigned to the document records successfully queued for processing.
        processed_filenames:
          type: array
          items:
            type: string
          description: List of filenames corresponding to the successfully queued documents.
        errors:
          type: array
          items:
            type: string
          description: List of error messages for files that failed to upload or queue.

    GroupDocumentMetadata: # For group documents list/details
      type: object
      description: Metadata associated with a document uploaded to a group workspace. Similar to User DocumentMetadata but includes group context.
      properties:
        id:
          type: string
          # format: uuid # Confirm if group doc IDs are UUIDs
          description: Unique ID for the group document metadata record.
        group_id:
          type: string
          format: uuid
          description: ID of the group this document belongs to.
        user_id: # ID of the user who uploaded the document
          type: string
          description: ID of the user who uploaded the document to the group.
        file_name:
          type: string
          description: Original filename.
        status:
          type: string
          description: Processing status.
        uploaded_at:
          type: string
          format: date-time
          description: Timestamp of upload.
        num_file_chunks:
          type: integer
          nullable: true
        percentage_complete:
          type: number
          format: float
          nullable: true
        title:
          type: string
          nullable: true
        abstract:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
          nullable: true
        publication_date:
          type: string
          nullable: true
        document_classification:
          type: string
          nullable: true
        authors:
          type: array
          items:
            type: string
          nullable: true
        # Add other relevant fields mirrored from user documents or specific to groups

    FeedbackItem:
      type: object
      description: Represents a single piece of user feedback on an AI message.
      properties:
        id:
          type: string
          format: uuid
          description: Unique ID for the feedback entry.
        userId:
          type: string
          nullable: true
          description: ID of the user who submitted the feedback.
        conversationId: # Added based on implementation
          type: string
          format: uuid
          description: ID of the conversation the feedback relates to.
        messageId: # Added based on implementation
          type: string
          description: ID of the specific AI message the feedback is about.
        prompt:
          type: string
          description: The user prompt that led to the AI response being reviewed.
        aiResponse:
          type: string
          description: The text of the AI response being reviewed.
        feedbackType:
          type: string
          enum: [Positive, Negative, Neutral]
          description: The type of feedback submitted.
        reason:
          type: string
          nullable: true
          description: Optional user comment or reason.
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the feedback was submitted.
        adminReview:
          type: object
          description: Fields related to administrative review of the feedback.
          properties:
            acknowledged:
              type: boolean
              default: false
              description: Has an admin acknowledged/reviewed this feedback?
            analyzedBy:
              type: string
              nullable: true
              description: ID of the admin who reviewed the feedback.
            analysisNotes:
              type: string
              nullable: true
              description: Admin's notes on the feedback analysis.
            responseToUser:
              type: string
              nullable: true
              description: Any response communicated back to the user (if applicable).
            actionTaken:
              type: string
              nullable: true
              description: Description of any corrective action taken.
            reviewTimestamp:
              type: string
              format: date-time
              nullable: true
              description: Timestamp when the admin review fields were last updated.

    GroupPrompt:
      type: object
      description: A prompt shared within a group.
      properties:
        id:
          type: string
          format: uuid
        group_id:
          type: string
          format: uuid
          description: ID of the group this prompt belongs to.
        user_id: # ID of the user who created/uploaded the prompt
          type: string
          description: ID of the user who created the prompt.
        name:
          type: string
          description: Name or title of the prompt.
        content:
          type: string
          description: The text content of the prompt.
        type:
          type: string
          example: "group_prompt"
          description: Internal type identifier.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the prompt was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the prompt was last updated.

    UserPrompt:
      type: object
      description: A personal prompt saved by a user.
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          description: ID of the user who owns this prompt.
        name:
          type: string
          description: Name or title of the prompt.
        content:
          type: string
          description: The text content of the prompt.
        type:
          type: string
          example: "user_prompt"
          description: Internal type identifier.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the prompt was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the prompt was last updated.

    GroupDiscoveryItem:
      type: object
      description: Basic information about a group for discovery purposes.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    UserGroupItem:
      type: object
      description: Information about a group the user is a member of, including their role.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        userRole:
          type: string
          enum: [Owner, Admin, DocumentManager, User]
          description: The role of the current authenticated user within this group.
        isActive:
          type: boolean
          description: Is this group currently set as the user's active group?

    GroupUserDetails:
      type: object
      description: Basic identification details for a user within a group context (owner, member list).
      properties:
        id: # User ID (oid/sub)
          type: string
        email:
          type: string
          format: email
          nullable: true
        displayName:
          type: string
          nullable: true

    PendingUser:
      type: object
      description: Information about a user whose request to join a group is pending approval.
      properties:
        userId:
          type: string
        email:
          type: string
          format: email
          nullable: true
        displayName:
          type: string
          nullable: true

    GroupMember:
      type: object
      description: Information about a member of a group, including their role.
      properties:
        userId:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [Owner, Admin, DocumentManager, User]
          description: The role of this member within the group.

    GroupDetails: # Full group document structure stored in database
      type: object
      description: Comprehensive details of a group.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        owner:
          $ref: '#/components/schemas/GroupUserDetails'
          description: The user who owns the group.
        users:
          type: array
          items:
            $ref: '#/components/schemas/GroupUserDetails'
          description: List of all users who are members of the group.
        admins:
          type: array
          items:
            type: string # User IDs
          description: List of user IDs with the Admin role.
        documentManagers:
          type: array
          items:
            type: string # User IDs
          description: List of user IDs with the DocumentManager role.
        pendingUsers:
          type: array
          items:
            $ref: '#/components/schemas/PendingUser'
          description: List of users waiting for membership approval.
        createdDate:
          type: string
          format: date-time
          description: Timestamp when the group was created.
        modifiedDate:
          type: string
          format: date-time
          description: Timestamp when the group was last modified.
        type:
          type: string
          example: "group"
          description: Internal type identifier.
        # Add any other fields from your group document structure (e.g., _ts)

    ModelInfo:
      type: object
      description: Information about an available Azure OpenAI model deployment.
      properties:
        deploymentName:
          type: string
          description: The name of the deployment in Azure OpenAI (used in API calls).
        modelName:
          type: string
          description: The underlying base model name (e.g., 'gpt-4', 'text-embedding-ada-002', 'dall-e-3').

    SafetyLog:
      type: object
      description: Record of a content safety violation triggered during chat.
      properties:
        id:
          type: string
          format: uuid
          description: Unique ID for the safety log entry.
        user_id:
          type: string
          description: ID of the user whose message triggered the violation.
        conversation_id:
          type: string
          format: uuid
          description: ID of the conversation where the violation occurred.
        message:
          type: string
          description: The user message content that triggered the safety check.
        triggered_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCategory'
          description: List of content safety categories detected in the message.
        blocklist_matches:
          type: array
          items:
            $ref: '#/components/schemas/BlocklistMatch'
          description: List of matched terms from content safety blocklists.
        timestamp: # Original timestamp from chat route message creation
          type: string
          format: date-time
          description: Timestamp when the original message was processed/blocked.
        reason:
          type: string
          description: Reason for blockage derived during chat processing (e.g., "Max severity >= 4").
        # Admin/User updateable fields
        status:
          type: string
          nullable: true
          description: Admin-assigned status (e.g., 'New', 'Reviewed', 'ActionTaken').
        action:
          type: string
          nullable: true
          description: Admin description of action taken.
        notes: # Admin notes
          type: string
          nullable: true
          description: Administrative notes.
        user_notes: # User's notes added via /my route
          type: string
          nullable: true
          description: Notes added by the user.
        created_at: # Timestamp of log *creation/update* (should be clarified in implementation)
          type: string
          format: date-time
          nullable: true
        last_updated: # Timestamp of log *update*
          type: string
          format: date-time
          nullable: true

    UserSearchResult:
      type: object
      description: Information about a user found via Graph API search.
      properties:
        id:
          type: string # Graph User ID (often UUID)
        displayName:
          type: string
        email:
          type: string
          format: email
          nullable: true # Email might not always be present depending on Graph object

    UserSettings: # Inner settings object used in GET response and POST/PATCH request
      type: object
      description: User-specific preference settings.
      properties:
        activeGroupOid:
          type: string
          format: uuid
          nullable: true
          description: ID of the group currently marked as active for the user.
        layoutPreference:
          type: string # e.g., 'default', 'compact', could be enum if values are fixed
          nullable: true
          description: User's preferred UI layout.
        splitSizesPreference:
          type: array
          items:
            type: number
            format: float # Or integer depending on how pane sizes are stored
          nullable: true
          description: User's preferred sizes for resizable UI panes.
        dockedSidebarHidden:
          type: boolean
          nullable: true
          description: User's preference for the docked sidebar visibility state.
        # Add other user-configurable settings keys here

    UserSettingsDocument: # The full document stored for a user in the database
      type: object
      description: The complete settings document for a user as stored in the database.
      properties:
        id:
          type: string # User ID (oid/sub), typically used as document ID
        user_id: # Can be redundant but often included for querying
          type: string
          description: User ID (oid/sub).
        settings:
          $ref: '#/components/schemas/UserSettings'
          description: The nested object containing user preferences.
        last_updated:
          type: string
          format: date-time
          description: Timestamp when the user settings were last modified.
        # Add any other top-level fields (like _ts for Cosmos DB)

  securitySchemes:
    bearerAuth: # Defines how API clients authenticate
      type: http
      scheme: bearer
      bearerFormat: JWT # Indicates the type of token expected
      description: "Azure AD issued JWT Bearer token required for authenticated endpoints. Include in the request header as 'Authorization: Bearer <YOUR_TOKEN>'."