#!/usr/bin/env python3
"""
Test for Unicode table to markdown conversion functionality.
Version: 0.229.003
Implemented in: 0.229.003

This test verifies that Unicode box-drawing tables (like those generated by the ESAM agent)
are correctly converted to markdown table format for proper HTML rendering.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_unicode_table_conversion():
    """Test conversion of Unicode box-drawing tables to markdown format."""
    print("🔍 Testing Unicode Table Conversion...")
    
    # Sample Unicode table from the actual ESAM agent response
    unicode_table_content = """Below is a summary of the license status, listing the first 10 results from the full dataset (500 total). Each row shows how many units (TotalQuantity) are owned, how many are currently InUse, and what remains (AvailableQuantity). If you would like to see the entire list, please let me know.

┌───────────┬─────────────┬───────────────┬───────┬─────────────────┐
│ LicenseID │ ProductName │ TotalQuantity │ InUse │ AvailableQuantity │
├───────────┼─────────────┼───────────────┼───────┼─────────────────┤
│ 1         │ Office 365  │ 229           │ 5     │ 224             │
│ 2         │ Office 365  │ 187           │ 5     │ 182             │
│ 3         │ Office 365  │ 86            │ 5     │ 81              │
│ 4         │ Office 365  │ 212           │ 5     │ 207             │
│ 5         │ Office 365  │ 206           │ 5     │ 201             │
│ 6         │ Office 365  │ 180           │ 5     │ 175             │
│ 7         │ Office 365  │ 76            │ 5     │ 71              │
│ 8         │ Office 365  │ 208           │ 5     │ 203             │
│ 9         │ Office 365  │ 167           │ 5     │ 162             │
│ 10        │ Office 365  │ 149           │ 5     │ 144             │
└───────────┴─────────────┴───────────────┴───────┴─────────────────┘

• "TotalQuantity" is how many licenses are owned.  
• "InUse" reflects how many licenses are currently allocated.  
• "AvailableQuantity" is TotalQuantity minus InUse."""
    
    # Test cases for various scenarios
    test_cases = [
        {
            "name": "ESAM Agent Unicode Table",
            "content": unicode_table_content,
            "expected": "Should convert Unicode table to markdown table"
        },
        {
            "name": "Regular Markdown Table",
            "content": """| License Type | Description | Price |
|--------------|-------------|-------|
| Standard     | Basic features | $10  |
| Premium      | Advanced features | $25 |""",
            "expected": "Should render as HTML table (no conversion needed)"
        },
        {
            "name": "Mixed Content with Unicode Table",
            "content": """Here are the license statistics:

┌─────────┬───────────┐
│ Product │ Count     │
├─────────┼───────────┤
│ Office  │ 100       │
│ Adobe   │ 50        │
└─────────┴───────────┘

This data shows current usage.""",
            "expected": "Text + converted markdown table + text"
        },
        {
            "name": "Code Block (Should Not Convert)",
            "content": """```
┌─────────┬───────────┐
│ Product │ Count     │
├─────────┼───────────┤
│ Office  │ 100       │
└─────────┴───────────┘
```""",
            "expected": "Should remain as code block"
        }
    ]
    
    # Create comprehensive test HTML
    html_content = create_test_html(test_cases, unicode_table_content)
    
    # Write the test file
    test_file = os.path.join(os.path.dirname(__file__), "unicode_table_conversion_test.html")
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"✅ Created test file: {test_file}")
    print("📋 Test cases created:")
    for i, case in enumerate(test_cases):
        print(f"  {i+1}. {case['name']}")
    
    return True

def create_test_html(test_cases, unicode_content):
    """Create the HTML test file with JavaScript conversion logic."""
    
    html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unicode Table Conversion Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Copy table styles from chats.css */
        .message-text table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .message-text thead {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
        }
        .message-text th, .message-text td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
            vertical-align: top;
        }
        .message-text th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.875rem;
            letter-spacing: 0.5px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        .message-text tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        .message-text tbody tr:hover {
            background-color: #e9ecef;
            transition: background-color 0.2s ease;
        }
        .test-case {
            border: 1px solid #ddd;
            margin: 20px 0;
            padding: 15px;
            border-radius: 5px;
        }
        .input-content {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            white-space: pre-wrap;
            margin: 10px 0;
            font-size: 0.9em;
        }
        .result-good { border-left: 5px solid #28a745; }
        .result-bad { border-left: 5px solid #dc3545; }
        .conversion-log {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 10px;
            border-radius: 3px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 0.85em;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>Unicode Table Conversion Test</h1>
        <p class="lead">Testing conversion of Unicode box-drawing tables to markdown format for proper HTML rendering.</p>
        
        <div class="alert alert-info">
            <strong>Test Objective:</strong> Verify that Unicode tables (like those from ESAM Agent) are converted to proper HTML tables.
        </div>

        <div id="test-results"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/marked@15.0.7/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.7/dist/purify.min.js"></script>
    <script>
        // Configure marked for GFM
        marked.setOptions({
            gfm: true,
            breaks: true,
            tables: true
        });

        // Copy the conversion functions from chat-messages.js
        function convertUnicodeTableToMarkdown(content) {
            const unicodeTablePattern = /┌[─┬]+┐\\n(?:│[^│\\n]*│[^│\\n]*│[^\\n]*\\n)+├[─┼]+┤\\n(?:│[^│\\n]*│[^│\\n]*│[^\\n]*\\n)+└[─┴]+┘/g;
            
            return content.replace(unicodeTablePattern, (match) => {
                console.log('🔧 Converting Unicode table to markdown format');
                
                try {
                    const lines = match.split('\\n');
                    const dataLines = [];
                    let headerLine = null;
                    
                    for (const line of lines) {
                        if (line.includes('│') && !line.includes('┌') && !line.includes('├') && !line.includes('└')) {
                            const cells = line.split('│')
                                .filter(cell => cell.trim() !== '')
                                .map(cell => cell.trim());
                            
                            if (cells.length > 0) {
                                if (!headerLine) {
                                    headerLine = cells;
                                } else {
                                    dataLines.push(cells);
                                }
                            }
                        }
                    }
                    
                    if (headerLine && dataLines.length > 0) {
                        let markdownTable = '\\n\\n';
                        markdownTable += '| ' + headerLine.join(' | ') + ' |\\n';
                        markdownTable += '|' + headerLine.map(() => '---').join('|') + '|\\n';
                        
                        const displayRows = dataLines.slice(0, 10);
                        for (const row of displayRows) {
                            markdownTable += '| ' + row.join(' | ') + ' |\\n';
                        }
                        
                        if (dataLines.length > 10) {
                            markdownTable += '\\n*Showing first 10 of ' + dataLines.length + ' total rows*\\n';
                        }
                        
                        markdownTable += '\\n';
                        return markdownTable;
                    }
                } catch (error) {
                    console.error('Error converting Unicode table:', error);
                }
                
                return match;
            });
        }

        // Test cases data
        const testCases = """ + str(test_cases).replace("'", '"') + """;

        // Run tests
        function runTests() {
            const resultsContainer = document.getElementById('test-results');
            
            testCases.forEach((testCase, index) => {
                const testDiv = document.createElement('div');
                testDiv.className = 'test-case';
                testDiv.id = `test-${index}`;
                
                // Process content through our conversion pipeline
                let processedContent = testCase.content;
                
                // Apply Unicode table conversion
                const originalContent = processedContent;
                processedContent = convertUnicodeTableToMarkdown(processedContent);
                const wasConverted = processedContent !== originalContent;
                
                // Parse with marked
                const htmlOutput = DOMPurify.sanitize(marked.parse(processedContent));
                
                // Create test UI
                testDiv.innerHTML = `
                    <h3>${testCase.name}</h3>
                    <p><strong>Expected:</strong> ${testCase.expected}</p>
                    
                    <h5>Input Content:</h5>
                    <div class="input-content">${testCase.content}</div>
                    
                    ${wasConverted ? `<div class="conversion-log">✅ Unicode table detected and converted to markdown</div>` : ''}
                    
                    <h5>Rendered Output:</h5>
                    <div class="message-text">${htmlOutput}</div>
                `;
                
                // Determine success/failure
                const outputElement = testDiv.querySelector('.message-text');
                const hasTable = outputElement.querySelector('table');
                const hasCodeBlock = outputElement.querySelector('pre code');
                
                let success = false;
                if (testCase.name.includes('Unicode Table') && hasTable) {
                    success = true;
                } else if (testCase.name.includes('Markdown Table') && hasTable) {
                    success = true;
                } else if (testCase.name.includes('Code Block') && hasCodeBlock) {
                    success = true;
                } else if (testCase.name.includes('Mixed Content') && hasTable) {
                    success = true;
                }
                
                testDiv.classList.add(success ? 'result-good' : 'result-bad');
                
                console.log(`${success ? '✅' : '❌'} ${testCase.name}:`, {
                    hasTable: !!hasTable,
                    hasCodeBlock: !!hasCodeBlock,
                    wasConverted: wasConverted
                });
                
                resultsContainer.appendChild(testDiv);
            });
        }

        // Run tests when page loads
        document.addEventListener('DOMContentLoaded', runTests);
    </script>
</body>
</html>"""
    
    return html_template

if __name__ == "__main__":
    print("🧪 Unicode Table Conversion Test")
    print("=" * 50)
    
    try:
        success = test_unicode_table_conversion()
        
        print("\n" + "=" * 50)
        if success:
            print("✅ Test file created successfully!")
            print("🌐 Open the HTML file in a browser to verify conversion")
            print("🔧 Check console logs for detailed conversion results")
        else:
            print("❌ Test creation failed")
            
        sys.exit(0 if success else 1)
        
    except Exception as e:
        print(f"❌ Test failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)